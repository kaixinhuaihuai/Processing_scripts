import pandas as pd
from numpy.polynomial.polynomial import polyfit
from pandas import DataFrame
import matplotlib.pyplot as plt
import numpy as np
from statistics import mean
import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.preprocessing import PolynomialFeatures


# Get all the relevant variables in a dataframe
values = {"SPQ_Total": [0, 12, 3, 9, 4, 13, 8, 4, 7, 5, 11, 10, 8, 9, 8, 9, 11, 10, 12, 6, 3, 2, 12, 17, 44, 51, 50, 41, 45, 41, 43, 43, 52, 42, 49, 53, 48, 63, 42, 42, 42, 50, 48, 42, 42],
            "Inter_Factor": [0, 6, 2, 8, 3, 4, 5, 3, 2, 0, 4, 7, 3, 4, 1, 4, 3, 7, 3, 2, 1, 1, 9, 8, 23, 26, 26, 17, 14, 20, 23, 26, 19, 23, 20, 24, 22, 25, 12, 21, 21, 20, 13, 21, 28],
            "CP_Factor": [0, 3, 0, 1, 3, 4, 1, 0, 5, 5, 8, 5, 2, 3, 3, 5, 2, 3, 0, 4, 3, 2, 3, 5, 24, 19, 17, 19, 29, 13, 19, 13, 25, 18, 18, 24, 19, 31, 24, 18, 18, 24, 25, 17, 10],
            "Dis_Factor": [0, 3, 1, 1, 0, 5, 2, 1, 0, 0, 0, 0, 3, 3, 5, 2, 6, 0, 9, 0, 0, 0, 3, 4, 5, 12, 12, 10, 9, 11, 9, 9, 15, 7, 16, 10, 12, 15, 12, 10, 10, 8, 14, 9, 8],
            "Res_sc": [98, 70, 86, 70, 74, 75, 74, 41, 92, 86, 66, 84, 77, 75, 75, 56, 76, 87, 68, 68, 93, 79, 58, 79, 55, 66, 53, 82, 50, 46, 52, 53, 71, 57, 40, 83, 33, 75, 50, 35, 43, 49, 62, 65, 45],
            "caud_hipp_con": [1.057423355, 0.4601775549, -0.1760074125, 0.003360781724, -0.1163610499, -0.5371856867, -3.052345745, 0.4071626974, -1.299382151, -2.823275141, -1.098306219, -0.0544564456, -0.7257028704, 1.708260706, 0.5759253632, -1.233395622, 0.2306508359, -0.01128487254, -0.5121295259, 1.002054798, -0.7149712397, -5.374926961, 0.7819198457, 0.7002582965, 1.419671978, 1.246418524, 0.6598274378, 1.706925638, 1.303664109, 2.421823722, 3.189261308, -0.09009477146, 0.08868194236, 0.5412794397, 0.3940483296, 0.1053737546, 0.4324353971, 0.9669655809, 2.915884206, 0.1452512171, 1.146039229, -1.216856147, 4.361527381, 0.4129567941, -0.3289549188],
            "dlPFC_vsi_con": [-0.1997812632, -0.05960422424, -0.258022977, -0.1840950175, -0.1753631901, -0.3787216051, -0.3435776537, -0.1706010015, -0.01277576153, -0.4978432621, -0.2183190759, -0.03079837426, -0.1047764541, 0.07616073613, -0.3243303185, -0.1822898565, 0.07217725188, 0.03822770854, 0.08441308043, -0.1649382836, 0.02073192723, -0.2377285995, -0.4181515439, -0.1356086016, -0.08210962745, 0.09129561501, -0.0427787395, 0.2851970687, -0.0975153177, -0.1389114488, 0.06512183327, -0.2054873378, 0.05587262654, -0.2112393116, -0.3283160368, 0.05716562105, -0.06831544239, 0.2051052752, 0.2459948811, 0.0021591916, 0.05343419734, 0.3911186904, 0.4630492927, 0.1413842038, -0.002988742772],
            "vmpfc_hipp_con": [1.266097605, 0.3572637439, 0.6568393707, 0.005997396773, 0.3116824031, -0.1443789899, 0.3623471856, 0.4463395327, 0.1490196777, 0.4456235021, 0.3956818432, 0.7133405507, 0.6124173999, 1.067119122, 0.6166317463, -0.0884961877, 0.5335350931, 0.3379840702, 0.1717459932, 0.6147510111, 0.737184912, 0.6125677526, 0.455690816, -0.5460744947, 0.0004746690392, 0.681103766, 0.1384247653, -0.7211120725, 0.1244323601, 0.06338997418, -0.4441726804, 0.4570877403, 0.1229258329, 0.1429163888, 0.007718883455, 0.1962763891, 0.7330744863, -0.0855958648, 0.2166620344, 0.2651566267, 0.6305118203, -0.04379465617, -0.4747198075, -0.1947713494, -0.4333042353],
            "hipp_thal_con": [0.02119126207, 0.4357165284, 1.308680653, 0.2356305341, 1.06027027, 0.2643411605, 0.3838388397, 0.7142581559, 0.01740214946, 0.3692947026, -0.1391853686, 0.3020068057, 0.2236021157, 0.7588376445, 0.5377441861, 0.2667715015, 0.6491574645, 0.8045136512, 0.4147207741, 0.02393123021, 0.4298526992, 0.2885237153, 0.4357093632, -0.1228596738, 0.3661079519, 0.05799447192, -0.1418736418, -0.8615743141, -0.04819220306, -0.123570414, 0.2500602297, 0.8043802344, 0.5796088436, 0.2523829858, -0.06718741984, 0.3185836381, 0.2331142389, 0.02350252248, -0.1807097796, 0.02349122496, -0.05923035217, 0.4660839968, -0.2108591903, 0.5019100988, -0.1248505492],
            "hipp_par_str_con": [-0.1397635381, 0.3744373454, 0.7703290515, 0.2706984242, 0.5428284109, 0.1364850129, 0.4169474567, 0.7047298493, 0.2365180128, -0.01542827808, 0.148338658, -0.1597423823, 0.07504173361, 0.4527276258, 0.5812850396, -0.007561620079, 0.4971710501, 0.6303527442, 0.4429634098, 0.09911849682, 0.3638268945, 0.445888362, 0.01756280909, -0.1412624498, 0.5629026186, -0.001495158445, -0.2527643984, -0.4040648569, -0.1689961182, -0.3816993365, 0.1573682775, 0.5335659443, 0.5662844388, 0.1151299027, -0.1315250314, -0.08727820979, 0.2706573815, 0.1823888815, 0.02056119173, 0.1429817333, 0.004989469547, 0.7792736457, 0.2857730906, 0.1891268329, -0.2568253097],
            "hipp_caud_con": [0.3694935818, 0.3291146668, 0.8518380575, 0.1309872767, 0.4604872676, 1.152486605, 0.1466059811, 0.9928071253, 0.2289186497, 0.3998319112, 0.2031294388, -0.01133412462, 0.1716842771, 0.6228727663, 0.7546323327, 1.248374353, 0.7159891777, 0.7638997716, 0.4125998774, 0.5491780814, 0.6391761075, 0.257797477, 0.3578438496, 0.1769975297, 0.07213319879, 0.2898152961, 0.10457855, -0.6570575342, -0.05519711971, -0.02192311589, 0.354864507, 0.6857454531, -0.2949285908, 0.1917645776, -0.5942830636, 0.0565740946, -0.2174635118, 0.2987795945, -0.1150075216, 0.7846045459, 0.09270008741, 0.3631229191, -0.3296784739, 0.3419748974, -0.1453142907],
            "caudate_thal_con": [0.7338821876, 0.1020270273, 1.542284616, 1.695533585, 1.974679158, 1.87331502, -1.684026537, 0.9179136474, 0.8480526963, -1.330168168, 0.5517863378, -0.3136852916, -0.1718604991, 1.473896576, 1.445904458, -1.593188833, -0.4166143359, 0.4354135325, 0.4772554112, -0.07051071999, 0.2292971056, -1.400043937, 1.304351995, 0.8164163613, 1.260450316, 1.514351065, 1.504415779, 3.16696658, 2.179894802, 2.671877006, 1.052377824, 1.239564987, 0.7666808036, 0.2973616639, 1.252033875, 1.479609009, 1.239690975, 1.775628285, 2.020888881, 0.4616196543, 0.7837413947, 0.03632745216, 0.4146034389, 1.056257312, 0.2658679976],
            "STAI-Y1":[29,31,25,31,32,26,35,26,26,20,31,27,38,23,32,50,33,30,22,32,34,25,39,42,50,45,38,49,34,58,27,38,39,55,31,50,27,62,36,49,33,49,43,50,52],
            "STAI-Y2": [37,35,34,45,35,32,37,48,31,24,51,38,29,26,40,49,35,35,34,31,31,26,42,55,59,58,45,53,53,61,62,61,56,56,53,60,47,62,57,55,70,61,69,55,52],
            "BDI": [7,4,2,5,4,3,0,1,2,0,3,1,4,0,4,5,2,3,6,1,0,1,5,16,15,14,16,8,9,11,15,12,12,3,4,13,0,17,12,11,23,17,6,14,16],
            "Autism": [9,23,9,13,10,15,11,20,12,14,15,10,14,8,17,18,14,9,30,7,18,18,19,26,11,23,27,26,13,28,28,23,12,22,14,24,26,22,14,17,31,25,17,25,26]}


data = pd.DataFrame(values, columns=["SPQ_Total", "Inter_Factor", "CP_Factor", "Dis_Factor", "Res_sc", "STAI-Y1", "STAI-Y2", "BDI", "Autism", "caud_hipp_con", "dlPFC_vsi_con", "vmpfc_hipp_con", "hipp_thal_con", "hipp_par_str_con", "hipp_caud_con", "caudate_thal_con"])

#print(data)

# do the multiple regressions - one for each connectivity as DVs respectively

X = data[["SPQ_Total", "CP_Factor", "Inter_Factor", "Dis_Factor", "Res_sc", "STAI-Y1", "STAI-Y2", "BDI", "Autism"]]   # these are the predictors
#X = data[["CP_Factor", "Res_sc"]]   # these are the predictors
#Y1 = data["caud_hipp_con"]
#Y2 = data["dlPFC_vsi_con"]
#Y3 = data["vmpfc_hipp_con"]
Y1 = data["hipp_thal_con"]
Y2 = data["hipp_par_str_con"]
Y3 = data["hipp_caud_con"]
#Y7 = data["caudate_thal_con"]

X = sm.add_constant(X)
model = sm.OLS(Y1, X).fit()
predictions = model.predict(X)
print_model = model.summary()
print(print_model)

# Create interaction terms
x_interaction = PolynomialFeatures(2, interaction_only = True, include_bias = False).fit_transform(X)
interaction_df = pd.DataFrame (x_interaction, columns = ["SPQ_Total", "CP_Factor", "Inter_Factor", "Dis_Factor", "Res_sc", "STAI-Y1", "STAI-Y2", "BDI", "Autism",
                    ])

vif = pd.DataFrame()
vif["VIF Factor"] = [variance_inflation_factor(X.values, i) for i in range (X.shape[1])]
vif["features"] = X.columns
print(vif.round(1))

# do plots if you wanna check the linearity
plt.scatter(data["Dis_Factor"], data["hipp_caud_con"], color="blue", alpha=0.5)
plt.scatter(data["Dis_Factor"], data["hipp_par_str_con"], color="red", alpha=0.5)
plt.scatter(data["Dis_Factor"], data["hipp_thal_con"], color="green", alpha=0.5)
x = data["Dis_Factor"]
plt.xlabel("Dis_Factor", fontsize = 14)
plt.ylabel("Connectivity", fontsize = 14)
plt.plot(np.unique(x), np.poly1d(np.polyfit(x,Y2,1)) (np.unique(x)), color="red")
plt.plot(np.unique(x), np.poly1d(np.polyfit(x,Y1,1)) (np.unique(x)), color="green")
plt.plot(np.unique(x), np.poly1d(np.polyfit(x,Y3,1)) (np.unique(x)), color="blue")
plt.gca().legend(("Hippocampus_DCP", "Hippocampus_thalamus", "Hippocampus_caudate"))
plt.show()
